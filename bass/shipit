#!/usr/bin/env bass

; load libraries
(use (.strings)
     (*dir*/bass.bass))

; builds and publishes a GitHub release
;
; Needs the tag to checkout, build, and publish along with a title for the
; release.
(defn main []
  (for [{:sha sha
         :tag tag
         (:title tag) title
         (:draft false) draft} *stdin*]
    (let [src (bass:checkout sha)
          release-url (create-release src sha tag title draft)]
      (log "release published" :release release-url))))

; all supported os and architectures supported by bass
;
; Must be valid values to pass to GOOS / GOARCH.
(def supported-os-arches
  [["linux" "amd64"]
   ["darwin" "amd64"]
   ["darwin" "arm64"]
   ["windows" "amd64"]])

; returns the bass binary archives for each supported os + arch
(defn all-bins [src tag]
  (foldl
    (fn [acc [os arch]]
      (let [key (string->symbol (str os "-" arch))
            dist (bass:build src tag os arch)]
        (assoc acc key dist)))
    {}
    supported-os-arches))

; returns a .json file representation of a built archive
(defn archive-repro [os-arch archive]
  (mkfile (string->fs-path (str "bass." os-arch ".json"))
          (json archive)))

; returns the sha256sum output of each file
;
; Makes sure to to mount each file in to the working directory so that the
; output can be passed to sha256sum --check --ignore-missing.
(defn sha256sums [src files]
  (-> (from (bass:deps src)
        (foldl
          (fn [t f] (with-mount t f (path-base f)))
          (with-args (.sha256sum) (map path-base files))
          files))
      (read :raw)
      next))

; returns all the assets that will be uploaded to the release
(defn build-assets [src tag]
  (let [bins (all-bins src tag)
        archives (vals bins)
        repros (reduce-kv (fn [acc k v] (cons (archive-repro k v) acc)) [] bins)
        files (concat archives repros)
        sums (mkfile ./sha256sums.txt (sha256sums src files))]
    (bass:smoke-test bins:linux-amd64)
    (conj files sums)))

; returns true if the tag looks like a prerelease version
(defn prerelease? [tag]
  (or ; "v1.2.3-rc.1"
      (strings:includes? tag "-")
      ; "v0.2.0+dev"
      (strings:includes? tag "+")
      ; "nightly"
      (not (strings:includes? tag "."))))

; creates a release with the given assets
(defn create-release [src sha tag title draft]
  (let [release (bass:release (mask *env*:GITHUB_TOKEN :github-token))
        assets (build-assets src tag)
        draft draft
        pre? (prerelease? tag)]
    (log "shipping!" :sha sha :tag tag)
    (release:create!
      tag assets
      :target sha
      :title title
      :generate-notes true
      :notes-file (bass:release-notes src tag)
      :draft draft
      :prerelease pre?
      :discussion-category (if (or draft pre?) null "General"))))
