#!/usr/bin/env bass

(use (.strings)
     (.git (linux/alpine/git)))

(defn main []
  (def {:src src :tag tag}
    (next *stdin*))

  (let [bumped-go (bump-go src tag)]
    (write bumped-go/go.mod src/go.mod)
    (write bumped-go/go.sum src/go.sum))

  (write
    (bump-bass src/bass/buildkit.bass tag)
    src/bass/buildkit.bass))

(defn bump-go [src tag]
  (def buildkit
    (git:github/moby/buildkit/ref/ tag))

  (def bumped-replaces
    (sync-replaces src/go.mod "buildkit" buildkit))

  (from (linux/golang)
    (cd src
      ($ cp $bumped-replaces ./go.mod)
      (cache-go ($ go get (str "github.com/moby/buildkit@" tag)))
      (cache-go ($ go mod tidy)))))

(defn bump-bass [buildkit.bass tag]
  (from (linux/alpine)
    ($ sed -e
       (str "s"
            "/(def \\*buildkit-tag\\* \".*\")"
            "/"[:def :*buildkit-tag* tag] ; feelin cute, might refactor later
            "/")
       $buildkit.bass)))

(defn sync-replaces [gomod label replace-src]
  (update-replaces gomod label (find-replaces replace-src)))

(defn find-replaces [replace-src]
  (-> ($ sh -c "grep '^replace' $0 || true" replace-src/go.mod)
      (with-image (linux/alpine))
      (read :raw)
      next
      trim))

(defn escape-linebreaks [lines]
  (strings:join "\\\n" (strings:split lines "\n")))

(defn update-replaces [gomod label val]
  (subpath
    (from (linux/alpine)
      ($ cp $gomod ./go.mod)
      ($ sed -i
         -e (str ; select line range
                 "/BEGIN SYNC " label "/,/END SYNC/"
                 ; change
                 "c\\"
                 ; new content
                 "// BEGIN SYNC " label "\\\n"
                 (escape-linebreaks val) "\\\n"
                 ; autofmt adds this blank line so be consistent
                 "\\\n"
                 "// END SYNC")
         ./go.mod))
    ./go.mod))

(defn cache-go [thunk]
  (-> thunk
      (with-mount (cache-dir "bass go mod") /go/pkg/mod/)
      (with-mount (cache-dir "bass go cache") /root/.cache/go-build)))
