; returns the last value from the source
;
; As with [next], a default may be provided to be returned when the source is
; empty. If not provided, an error will be raised if the source is empty.
;
; => (last (list->source [1 2 3]))
(defn last [source & default]
  (if (empty? default)
    (last source (next source))
    (do
      (def v (next source :end))
      (if (= v :end)
        (first default)
        (last source v)))))

; calls f for every value read from the source
;
; Returns null.
;
; => (each (list->source [1 2 3]) log)
(defn each [source f]
  (let [n (next source :end)]
    (if (= n :end)
      null
      (do
        (f n)
        (each source f)))))

; loops over values from sources
;
; Takes a list alternating bindings and their sources, similar to [let].
; Reads values across all sources and evaluates the body for each set of values
; as they are read with [next].
;
; Returns null when the source reaches its end.
;
; => (def evens (list->source [0 2 4]))
;
; => (def odds (list->source [1 3 5]))
;
; => (for [a evens b odds] (log "got" :a a :b b))
^:indent
(defop for [bindings & body] scope
  (let [sources (map-pairs (fn [_ src] src) bindings)
        args (map-pairs (fn [arg _] arg) bindings)]
    (eval [each [across & sources] [fn [args] & body]] scope)))

; reads the next n values from the source into a list
;
; => (take 2 (list->source [1 2 3]))
(defn take [n source]
  (if (<= n 0)
    []
    (cons (next source) (take (- n 1) source))))

; reads all values from the source into a list
;
; => (take-all (list->source [1 2 3]))
(defn take-all [source]
  (let [val (next source _)]
    (if (ignore? val)
      []
      (cons val (take-all source)))))
